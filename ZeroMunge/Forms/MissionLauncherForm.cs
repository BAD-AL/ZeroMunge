using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using ZeroMunge.Modules;

namespace ZeroMunge
{
	public partial class MissionLauncherForm : Form
	{
		private System.Windows.Forms.ToolTip FormTooltips = new ToolTip();
		private Prefs prefs = null;
		Logger log_dude = null;
		public MissionLauncherForm(Logger logger)
		{
			InitializeComponent();
			prefs = Utilities.LoadPrefs();
			txt_missionName.AppendText( LastMission);
			log_dude = logger;

			// set tooltips 
			FormTooltips.SetToolTip(txt_missionName, Tooltips.MissionLauncher.Mission);
			FormTooltips.SetToolTip(btn_launch, Tooltips.MissionLauncher.Launch);
			FormTooltips.SetToolTip(btn_close, Tooltips.MissionLauncher.Close);
		}

		private static string LastMission = "";

		private void Log(string message, LogType type)
		{
			if( log_dude != null)
				log_dude.Log(message, type);
		}

		private void btn_close_Click(object sender, EventArgs e)
		{
			this.Close();
		}

		protected override void OnClosing(CancelEventArgs e)
		{
			base.OnClosing(e);
			Cleanup();
		}

		private void txt_missionName_KeyDown(object sender, KeyEventArgs e)
		{
			if (e.KeyCode == Keys.Enter)
			{
				e.Handled = true;
				LaunchMission();
			}
		}

		private void btn_launch_Click(object sender, EventArgs e)
		{
			LaunchMission();
		}

		private void LaunchMission()
		{
			prefs = Utilities.LoadPrefs();
			if (Directory.Exists(prefs.ModToolsLocation) && File.Exists(prefs.DebuggerExe))
			{
				if (SetupMission())
					LaunchDebuggerExe();
			}
			else
			{
				MessageBox.Show("Please set both 'ModTools location' and 'Debugger exe' (in preferences) to use this feature\n", "Warning",
						MessageBoxButtons.OK, MessageBoxIcon.Warning);
			}
		}

		private string MungeScript(string contents, string outputPath)
		{
			String tempDir = Path.GetTempPath();
			string tmpLuaFile = tempDir + "addme.lua";
			File.WriteAllText(tmpLuaFile, contents);

			Munger dude = new Munger(this.log_dude);
			dude.AddItem(tmpLuaFile);
			bool deleteWorkspace = true;
			string result = dude.CreateLvl(tempDir, "addme.lvl", "PC", deleteWorkspace);
			if (result.StartsWith("Error"))
			{
				return result;
			}
			else
			{
				// success
				string dest = outputPath + "addme.script";
				if (File.Exists(dest))
					File.Delete(dest);
				
				File.Move(result, dest);
				Log("Moved file to: " + dest, LogType.Info);
				File.Delete(tmpLuaFile);
				return dest;
			}
		}

		private bool SetupMission()
		{
			bool retVal = false;
			string missionName = txt_missionName.Text;
			LastMission = missionName;
			if (!String.IsNullOrEmpty(missionName))
			{
				string target = prefs.GameDirectory;
				if (!target.EndsWith("\\"))
					target += "\\";
				target += "addon\\zz_ZeroMungeAutoLaunch\\";

				if (!Directory.Exists(target))
					Directory.CreateDirectory(target);

				string fileContent = autoLaunchLua.Replace("ABCc_con", missionName);
				string result = MungeScript(fileContent, target);
				if (File.Exists(result))
				{
					retVal = true;
					Log("Auto Launch addme.script saved to " + result, LogType.Info);
				}
				else
				{
					MessageBox.Show("Error creating auto launch addme!\n"+result, "Error", 
						MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
			}
			else
			{
				MessageBox.Show("Mission Name Empty!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
			return retVal;
		}

		private void LaunchDebuggerExe()
		{
			if (String.IsNullOrEmpty(prefs.GameDirectory))
			{
				MessageBox.Show("Game path not set. Set Game path to use this feature.", "Error");
				return;
			}
			string programName = prefs.DebuggerExe;

			if (File.Exists(programName))
			{
				string msg = "Launching " + programName + " " + prefs.DebuggerArgs;
				Log(msg, LogType.Info);
				ProcessManager.RunCommand("\"" + programName + "\"", prefs.DebuggerArgs, prefs.GameDirectory);
			}
			else
			{
				string msg = String.Format("Could not find '{0}'\r\n", programName);
				Log(msg, LogType.Warning);
				MessageBox.Show(msg, "Warning");
			}
		}

		private void Cleanup()
		{
			string target = prefs.GameDirectory;
			if (!target.EndsWith("\\"))
				target += "\\";
			target += "addon\\zz_ZeroMungeAutoLaunch\\";
			try
			{
				if( Directory.Exists(target))
					Directory.Delete(target, true);
			}
			catch(Exception )
			{
				MessageBox.Show("Error while cleaning up auto launch mission!\nPlease ensure: '"+ target +
					"' is deleted!",
					"Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
		}
		// ifs_legal --> Loads in 1st person

		const string autoLaunchLua = @"
-- addme.lua 
-- Generated by ZeroMunge
-- 
local autoLaunchMission = 'ABCc_con'
print('addon\\zz_ZeroMungeAutoLaunch\\addme.script: Start')
print('Setting Auto Launch mission to: '.. autoLaunchMission)
local origScriptCB_PushScreen = ScriptCB_PushScreen
ScriptCB_PushScreen = function(name)
	-- have user login, then start mission.
	if (name == 'ifs_sp_campaign' ) then 
		autoLaunchComplete = true 
		ScriptCB_SetMissionNames({ { Map = autoLaunchMission, dnldable = nil, Side = 1, SideChar = nil, Team1 = 'team1', Team2 = 'team2'} }, false)
		ScriptCB_SetTeamNames(0, 0)
		ScriptCB_EnterMission()
	end
	return origScriptCB_PushScreen(name)
end
print('addon\\zz_ZeroMungeAutoLaunch\\addme.script: End')
";

		private void aboutMissionLauncherToolStripMenuItem_Click(object sender, EventArgs e)
		{
			MessageBox.Show(
@"Mission Launcher:
Creates: 

   `addon\\zz_ZeroMungeAutoLaunch\\addme.script` 

to setup the specific mission to launch.

If the ZeroMunge program exists abnormally, you may need to manually clean up this file.
Normal closing of this dialog will remove the auto launch file.

Bonus feature:
You can actually launch a specified mission even if it's not selectalbe in the mission 
select screen.",
			"About", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}
	}
}
